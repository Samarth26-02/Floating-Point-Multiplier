`timescale 1ns / 1ps

module tb_floating_point_multiplier;

    // Testbench inputs
    reg [31:0] A;      // Input A (32-bit single precision)
    reg [31:0] B;      // Input B (32-bit single precision)

    // Testbench output
    wire [31:0] product; // 32-bit product output

    // Instantiate the floating-point multiplier
    floating_point_multiplier uut (
        .A(A),
        .B(B),
        .product(product)
    );

    // Stimulus for testing
    initial begin
        // Display headers
        $display("Time\tA\t\t\tB\t\t\tProduct");

        // Test case 1: Multiply 1.0 * 1.0
        A = 32'b00111111100000000000000000000000; // 1.0 in IEEE 754 format
        B = 32'b00111111100000000000000000000000; // 1.0 in IEEE 754 format
        #10;
        $display("%0t\t%h\t%h\t%h", $time, A, B, product);

        // Test case 2: Multiply -1.0 * 1.0
        A = 32'b11111111100000000000000000000000; // -1.0 in IEEE 754 format
        B = 32'b00111111100000000000000000000000; // 1.0 in IEEE 754 format
        #10;
        $display("%0t\t%h\t%h\t%h", $time, A, B, product);

        // Test case 3: Multiply 2.5 * 3.0
        A = 32'b01000000001000000000000000000000; // 2.5 in IEEE 754 format
        B = 32'b01000000011000000000000000000000; // 3.0 in IEEE 754 format
        #10;
        $display("%0t\t%h\t%h\t%h", $time, A, B, product);

        // Test case 4: Multiply 0.5 * 0.5
        A = 32'b00111111000000000000000000000000; // 0.5 in IEEE 754 format
        B = 32'b00111111000000000000000000000000; // 0.5 in IEEE 754 format
        #10;
        $display("%0t\t%h\t%h\t%h", $time, A, B, product);

        // Test case 5: Multiply large numbers
        A = 32'b01111111011100000000000000000000; // Very large number (2^127)
        B = 32'b01111111011100000000000000000000; // Very large number (2^127)
        #10;
        $display("%0t\t%h\t%h\t%h", $time, A, B, product);

        // Test case 6: Multiply small numbers (underflow scenario)
        A = 32'b00000000010000000000000000000000; // Small number (2^-126)
        B = 32'b00000000010000000000000000000000; // Small number (2^-126)
        #10;
        $display("%0t\t%h\t%h\t%h", $time, A, B, product);

        // End the simulation
        $finish;
    end

endmodule
